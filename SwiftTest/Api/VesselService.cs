/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KerbalApi.Api
{
  public partial class VesselService {
    public interface Iface {
      KerbalApi.Api.Vessel getActiveVessel(string authString);
      #if SILVERLIGHT
      IAsyncResult Begin_getActiveVessel(AsyncCallback callback, object state, string authString);
      KerbalApi.Api.Vessel End_getActiveVessel(IAsyncResult asyncResult);
      #endif
      KerbalApi.Api.FlightGlobals getFlightGlobals(string authString);
      #if SILVERLIGHT
      IAsyncResult Begin_getFlightGlobals(AsyncCallback callback, object state, string authString);
      KerbalApi.Api.FlightGlobals End_getFlightGlobals(IAsyncResult asyncResult);
      #endif
      bool setVesselName(string authString, string id);
      #if SILVERLIGHT
      IAsyncResult Begin_setVesselName(AsyncCallback callback, object state, string authString, string id);
      bool End_setVesselName(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_getActiveVessel(AsyncCallback callback, object state, string authString)
      {
        return send_getActiveVessel(callback, state, authString);
      }

      public KerbalApi.Api.Vessel End_getActiveVessel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getActiveVessel();
      }

      #endif

      public KerbalApi.Api.Vessel getActiveVessel(string authString)
      {
        #if !SILVERLIGHT
        send_getActiveVessel(authString);
        return recv_getActiveVessel();

        #else
        var asyncResult = Begin_getActiveVessel(null, null, authString);
        return End_getActiveVessel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getActiveVessel(AsyncCallback callback, object state, string authString)
      #else
      public void send_getActiveVessel(string authString)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getActiveVessel", TMessageType.Call, seqid_));
        getActiveVessel_args args = new getActiveVessel_args();
        args.AuthString = authString;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public KerbalApi.Api.Vessel recv_getActiveVessel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getActiveVessel_result result = new getActiveVessel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aex) {
          throw result.Aex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getActiveVessel failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getFlightGlobals(AsyncCallback callback, object state, string authString)
      {
        return send_getFlightGlobals(callback, state, authString);
      }

      public KerbalApi.Api.FlightGlobals End_getFlightGlobals(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getFlightGlobals();
      }

      #endif

      public KerbalApi.Api.FlightGlobals getFlightGlobals(string authString)
      {
        #if !SILVERLIGHT
        send_getFlightGlobals(authString);
        return recv_getFlightGlobals();

        #else
        var asyncResult = Begin_getFlightGlobals(null, null, authString);
        return End_getFlightGlobals(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getFlightGlobals(AsyncCallback callback, object state, string authString)
      #else
      public void send_getFlightGlobals(string authString)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getFlightGlobals", TMessageType.Call, seqid_));
        getFlightGlobals_args args = new getFlightGlobals_args();
        args.AuthString = authString;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public KerbalApi.Api.FlightGlobals recv_getFlightGlobals()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFlightGlobals_result result = new getFlightGlobals_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aex) {
          throw result.Aex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFlightGlobals failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setVesselName(AsyncCallback callback, object state, string authString, string id)
      {
        return send_setVesselName(callback, state, authString, id);
      }

      public bool End_setVesselName(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_setVesselName();
      }

      #endif

      public bool setVesselName(string authString, string id)
      {
        #if !SILVERLIGHT
        send_setVesselName(authString, id);
        return recv_setVesselName();

        #else
        var asyncResult = Begin_setVesselName(null, null, authString, id);
        return End_setVesselName(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setVesselName(AsyncCallback callback, object state, string authString, string id)
      #else
      public void send_setVesselName(string authString, string id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setVesselName", TMessageType.Call, seqid_));
        setVesselName_args args = new setVesselName_args();
        args.AuthString = authString;
        args.Id = id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_setVesselName()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        setVesselName_result result = new setVesselName_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aex) {
          throw result.Aex;
        }
        if (result.__isset.dex) {
          throw result.Dex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setVesselName failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["getActiveVessel"] = getActiveVessel_Process;
        processMap_["getFlightGlobals"] = getFlightGlobals_Process;
        processMap_["setVesselName"] = setVesselName_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void getActiveVessel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getActiveVessel_args args = new getActiveVessel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getActiveVessel_result result = new getActiveVessel_result();
        try {
          result.Success = iface_.getActiveVessel(args.AuthString);
        } catch (KerbalApiServer.Api.EAuthException aex) {
          result.Aex = aex;
        }
        oprot.WriteMessageBegin(new TMessage("getActiveVessel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFlightGlobals_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFlightGlobals_args args = new getFlightGlobals_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFlightGlobals_result result = new getFlightGlobals_result();
        try {
          result.Success = iface_.getFlightGlobals(args.AuthString);
        } catch (KerbalApiServer.Api.EAuthException aex) {
          result.Aex = aex;
        }
        oprot.WriteMessageBegin(new TMessage("getFlightGlobals", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setVesselName_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setVesselName_args args = new setVesselName_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        setVesselName_result result = new setVesselName_result();
        try {
          result.Success = iface_.setVesselName(args.AuthString, args.Id);
        } catch (KerbalApiServer.Api.EAuthException aex) {
          result.Aex = aex;
        } catch (KerbalApiServer.Api.EDataException dex) {
          result.Dex = dex;
        }
        oprot.WriteMessageBegin(new TMessage("setVesselName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActiveVessel_args : TBase
    {
      private string _authString;

      public string AuthString
      {
        get
        {
          return _authString;
        }
        set
        {
          __isset.authString = true;
          this._authString = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool authString;
      }

      public getActiveVessel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AuthString = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getActiveVessel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuthString != null && __isset.authString) {
          field.Name = "authString";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AuthString);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getActiveVessel_args(");
        bool __first = true;
        if (AuthString != null && __isset.authString) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthString: ");
          __sb.Append(AuthString);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getActiveVessel_result : TBase
    {
      private KerbalApi.Api.Vessel _success;
      private KerbalApiServer.Api.EAuthException _aex;

      public KerbalApi.Api.Vessel Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public KerbalApiServer.Api.EAuthException Aex
      {
        get
        {
          return _aex;
        }
        set
        {
          __isset.aex = true;
          this._aex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aex;
      }

      public getActiveVessel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new KerbalApi.Api.Vessel();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aex = new KerbalApiServer.Api.EAuthException();
                Aex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getActiveVessel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aex) {
          if (Aex != null) {
            field.Name = "Aex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getActiveVessel_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Aex != null && __isset.aex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Aex: ");
          __sb.Append(Aex== null ? "<null>" : Aex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFlightGlobals_args : TBase
    {
      private string _authString;

      public string AuthString
      {
        get
        {
          return _authString;
        }
        set
        {
          __isset.authString = true;
          this._authString = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool authString;
      }

      public getFlightGlobals_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AuthString = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFlightGlobals_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuthString != null && __isset.authString) {
          field.Name = "authString";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AuthString);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFlightGlobals_args(");
        bool __first = true;
        if (AuthString != null && __isset.authString) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthString: ");
          __sb.Append(AuthString);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFlightGlobals_result : TBase
    {
      private KerbalApi.Api.FlightGlobals _success;
      private KerbalApiServer.Api.EAuthException _aex;

      public KerbalApi.Api.FlightGlobals Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public KerbalApiServer.Api.EAuthException Aex
      {
        get
        {
          return _aex;
        }
        set
        {
          __isset.aex = true;
          this._aex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aex;
      }

      public getFlightGlobals_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new KerbalApi.Api.FlightGlobals();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aex = new KerbalApiServer.Api.EAuthException();
                Aex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFlightGlobals_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aex) {
          if (Aex != null) {
            field.Name = "Aex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getFlightGlobals_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Aex != null && __isset.aex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Aex: ");
          __sb.Append(Aex== null ? "<null>" : Aex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setVesselName_args : TBase
    {
      private string _authString;
      private string _id;

      public string AuthString
      {
        get
        {
          return _authString;
        }
        set
        {
          __isset.authString = true;
          this._authString = value;
        }
      }

      public string Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool authString;
        public bool id;
      }

      public setVesselName_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AuthString = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setVesselName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuthString != null && __isset.authString) {
          field.Name = "authString";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AuthString);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setVesselName_args(");
        bool __first = true;
        if (AuthString != null && __isset.authString) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthString: ");
          __sb.Append(AuthString);
        }
        if (Id != null && __isset.id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Id: ");
          __sb.Append(Id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setVesselName_result : TBase
    {
      private bool _success;
      private KerbalApiServer.Api.EAuthException _aex;
      private KerbalApiServer.Api.EDataException _dex;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public KerbalApiServer.Api.EAuthException Aex
      {
        get
        {
          return _aex;
        }
        set
        {
          __isset.aex = true;
          this._aex = value;
        }
      }

      public KerbalApiServer.Api.EDataException Dex
      {
        get
        {
          return _dex;
        }
        set
        {
          __isset.dex = true;
          this._dex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aex;
        public bool dex;
      }

      public setVesselName_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aex = new KerbalApiServer.Api.EAuthException();
                Aex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Dex = new KerbalApiServer.Api.EDataException();
                Dex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setVesselName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.aex) {
          if (Aex != null) {
            field.Name = "Aex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.dex) {
          if (Dex != null) {
            field.Name = "Dex";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Dex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("setVesselName_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Aex != null && __isset.aex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Aex: ");
          __sb.Append(Aex== null ? "<null>" : Aex.ToString());
        }
        if (Dex != null && __isset.dex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Dex: ");
          __sb.Append(Dex== null ? "<null>" : Dex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
