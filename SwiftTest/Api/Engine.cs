/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KerbalApi.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Engine : TBase
  {
    private bool _active;
    private long _partId;
    private double _thrust;
    private double _availableThrust;
    private double _maxThrust;
    private double _maxVacThrust;
    private double _thrustLimit;
    private double _specificImpulse;
    private double _vacuumSpecificImpulse;
    private double _kerbinSeaLevelSpecificImpulse;
    private List<string> _propellants;
    private Dictionary<string, double> _propellantRatios;
    private bool _hasFuel;
    private double _throttle;
    private bool _throttleLocked;
    private bool _canRestart;
    private bool _canShutdown;
    private bool _gimballed;
    private double _gimbalRange;
    private bool _gimbalLocked;
    private double _gimbalLimit;

    public bool Active
    {
      get
      {
        return _active;
      }
      set
      {
        __isset.active = true;
        this._active = value;
      }
    }

    public long PartId
    {
      get
      {
        return _partId;
      }
      set
      {
        __isset.partId = true;
        this._partId = value;
      }
    }

    public double Thrust
    {
      get
      {
        return _thrust;
      }
      set
      {
        __isset.thrust = true;
        this._thrust = value;
      }
    }

    public double AvailableThrust
    {
      get
      {
        return _availableThrust;
      }
      set
      {
        __isset.availableThrust = true;
        this._availableThrust = value;
      }
    }

    public double MaxThrust
    {
      get
      {
        return _maxThrust;
      }
      set
      {
        __isset.maxThrust = true;
        this._maxThrust = value;
      }
    }

    public double MaxVacThrust
    {
      get
      {
        return _maxVacThrust;
      }
      set
      {
        __isset.maxVacThrust = true;
        this._maxVacThrust = value;
      }
    }

    public double ThrustLimit
    {
      get
      {
        return _thrustLimit;
      }
      set
      {
        __isset.thrustLimit = true;
        this._thrustLimit = value;
      }
    }

    public double SpecificImpulse
    {
      get
      {
        return _specificImpulse;
      }
      set
      {
        __isset.specificImpulse = true;
        this._specificImpulse = value;
      }
    }

    public double VacuumSpecificImpulse
    {
      get
      {
        return _vacuumSpecificImpulse;
      }
      set
      {
        __isset.vacuumSpecificImpulse = true;
        this._vacuumSpecificImpulse = value;
      }
    }

    public double KerbinSeaLevelSpecificImpulse
    {
      get
      {
        return _kerbinSeaLevelSpecificImpulse;
      }
      set
      {
        __isset.kerbinSeaLevelSpecificImpulse = true;
        this._kerbinSeaLevelSpecificImpulse = value;
      }
    }

    public List<string> Propellants
    {
      get
      {
        return _propellants;
      }
      set
      {
        __isset.propellants = true;
        this._propellants = value;
      }
    }

    public Dictionary<string, double> PropellantRatios
    {
      get
      {
        return _propellantRatios;
      }
      set
      {
        __isset.propellantRatios = true;
        this._propellantRatios = value;
      }
    }

    public bool HasFuel
    {
      get
      {
        return _hasFuel;
      }
      set
      {
        __isset.hasFuel = true;
        this._hasFuel = value;
      }
    }

    public double Throttle
    {
      get
      {
        return _throttle;
      }
      set
      {
        __isset.throttle = true;
        this._throttle = value;
      }
    }

    public bool ThrottleLocked
    {
      get
      {
        return _throttleLocked;
      }
      set
      {
        __isset.throttleLocked = true;
        this._throttleLocked = value;
      }
    }

    public bool CanRestart
    {
      get
      {
        return _canRestart;
      }
      set
      {
        __isset.canRestart = true;
        this._canRestart = value;
      }
    }

    public bool CanShutdown
    {
      get
      {
        return _canShutdown;
      }
      set
      {
        __isset.canShutdown = true;
        this._canShutdown = value;
      }
    }

    public bool Gimballed
    {
      get
      {
        return _gimballed;
      }
      set
      {
        __isset.gimballed = true;
        this._gimballed = value;
      }
    }

    public double GimbalRange
    {
      get
      {
        return _gimbalRange;
      }
      set
      {
        __isset.gimbalRange = true;
        this._gimbalRange = value;
      }
    }

    public bool GimbalLocked
    {
      get
      {
        return _gimbalLocked;
      }
      set
      {
        __isset.gimbalLocked = true;
        this._gimbalLocked = value;
      }
    }

    public double GimbalLimit
    {
      get
      {
        return _gimbalLimit;
      }
      set
      {
        __isset.gimbalLimit = true;
        this._gimbalLimit = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool active;
      public bool partId;
      public bool thrust;
      public bool availableThrust;
      public bool maxThrust;
      public bool maxVacThrust;
      public bool thrustLimit;
      public bool specificImpulse;
      public bool vacuumSpecificImpulse;
      public bool kerbinSeaLevelSpecificImpulse;
      public bool propellants;
      public bool propellantRatios;
      public bool hasFuel;
      public bool throttle;
      public bool throttleLocked;
      public bool canRestart;
      public bool canShutdown;
      public bool gimballed;
      public bool gimbalRange;
      public bool gimbalLocked;
      public bool gimbalLimit;
    }

    public Engine() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Active = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              PartId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Double) {
              Thrust = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Double) {
              AvailableThrust = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Double) {
              MaxThrust = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Double) {
              MaxVacThrust = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Double) {
              ThrustLimit = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.Double) {
              SpecificImpulse = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.Double) {
              VacuumSpecificImpulse = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Double) {
              KerbinSeaLevelSpecificImpulse = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.List) {
              {
                Propellants = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2;
                  _elem2 = iprot.ReadString();
                  Propellants.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Map) {
              {
                PropellantRatios = new Dictionary<string, double>();
                TMap _map3 = iprot.ReadMapBegin();
                for( int _i4 = 0; _i4 < _map3.Count; ++_i4)
                {
                  string _key5;
                  double _val6;
                  _key5 = iprot.ReadString();
                  _val6 = iprot.ReadDouble();
                  PropellantRatios[_key5] = _val6;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.Bool) {
              HasFuel = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.Double) {
              Throttle = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.Bool) {
              ThrottleLocked = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.Bool) {
              CanRestart = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.Bool) {
              CanShutdown = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.Bool) {
              Gimballed = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.Double) {
              GimbalRange = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Bool) {
              GimbalLocked = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.Double) {
              GimbalLimit = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Engine");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.active) {
        field.Name = "active";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Active);
        oprot.WriteFieldEnd();
      }
      if (__isset.partId) {
        field.Name = "partId";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PartId);
        oprot.WriteFieldEnd();
      }
      if (__isset.thrust) {
        field.Name = "thrust";
        field.Type = TType.Double;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Thrust);
        oprot.WriteFieldEnd();
      }
      if (__isset.availableThrust) {
        field.Name = "availableThrust";
        field.Type = TType.Double;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(AvailableThrust);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxThrust) {
        field.Name = "maxThrust";
        field.Type = TType.Double;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(MaxThrust);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxVacThrust) {
        field.Name = "maxVacThrust";
        field.Type = TType.Double;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(MaxVacThrust);
        oprot.WriteFieldEnd();
      }
      if (__isset.thrustLimit) {
        field.Name = "thrustLimit";
        field.Type = TType.Double;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ThrustLimit);
        oprot.WriteFieldEnd();
      }
      if (__isset.specificImpulse) {
        field.Name = "specificImpulse";
        field.Type = TType.Double;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(SpecificImpulse);
        oprot.WriteFieldEnd();
      }
      if (__isset.vacuumSpecificImpulse) {
        field.Name = "vacuumSpecificImpulse";
        field.Type = TType.Double;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(VacuumSpecificImpulse);
        oprot.WriteFieldEnd();
      }
      if (__isset.kerbinSeaLevelSpecificImpulse) {
        field.Name = "kerbinSeaLevelSpecificImpulse";
        field.Type = TType.Double;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(KerbinSeaLevelSpecificImpulse);
        oprot.WriteFieldEnd();
      }
      if (Propellants != null && __isset.propellants) {
        field.Name = "propellants";
        field.Type = TType.List;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Propellants.Count));
          foreach (string _iter7 in Propellants)
          {
            oprot.WriteString(_iter7);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (PropellantRatios != null && __isset.propellantRatios) {
        field.Name = "propellantRatios";
        field.Type = TType.Map;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Double, PropellantRatios.Count));
          foreach (string _iter8 in PropellantRatios.Keys)
          {
            oprot.WriteString(_iter8);
            oprot.WriteDouble(PropellantRatios[_iter8]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.hasFuel) {
        field.Name = "hasFuel";
        field.Type = TType.Bool;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasFuel);
        oprot.WriteFieldEnd();
      }
      if (__isset.throttle) {
        field.Name = "throttle";
        field.Type = TType.Double;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Throttle);
        oprot.WriteFieldEnd();
      }
      if (__isset.throttleLocked) {
        field.Name = "throttleLocked";
        field.Type = TType.Bool;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(ThrottleLocked);
        oprot.WriteFieldEnd();
      }
      if (__isset.canRestart) {
        field.Name = "canRestart";
        field.Type = TType.Bool;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanRestart);
        oprot.WriteFieldEnd();
      }
      if (__isset.canShutdown) {
        field.Name = "canShutdown";
        field.Type = TType.Bool;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanShutdown);
        oprot.WriteFieldEnd();
      }
      if (__isset.gimballed) {
        field.Name = "gimballed";
        field.Type = TType.Bool;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Gimballed);
        oprot.WriteFieldEnd();
      }
      if (__isset.gimbalRange) {
        field.Name = "gimbalRange";
        field.Type = TType.Double;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(GimbalRange);
        oprot.WriteFieldEnd();
      }
      if (__isset.gimbalLocked) {
        field.Name = "gimbalLocked";
        field.Type = TType.Bool;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(GimbalLocked);
        oprot.WriteFieldEnd();
      }
      if (__isset.gimbalLimit) {
        field.Name = "gimbalLimit";
        field.Type = TType.Double;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(GimbalLimit);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Engine(");
      bool __first = true;
      if (__isset.active) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Active: ");
        __sb.Append(Active);
      }
      if (__isset.partId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PartId: ");
        __sb.Append(PartId);
      }
      if (__isset.thrust) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Thrust: ");
        __sb.Append(Thrust);
      }
      if (__isset.availableThrust) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AvailableThrust: ");
        __sb.Append(AvailableThrust);
      }
      if (__isset.maxThrust) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxThrust: ");
        __sb.Append(MaxThrust);
      }
      if (__isset.maxVacThrust) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxVacThrust: ");
        __sb.Append(MaxVacThrust);
      }
      if (__isset.thrustLimit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ThrustLimit: ");
        __sb.Append(ThrustLimit);
      }
      if (__isset.specificImpulse) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SpecificImpulse: ");
        __sb.Append(SpecificImpulse);
      }
      if (__isset.vacuumSpecificImpulse) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VacuumSpecificImpulse: ");
        __sb.Append(VacuumSpecificImpulse);
      }
      if (__isset.kerbinSeaLevelSpecificImpulse) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KerbinSeaLevelSpecificImpulse: ");
        __sb.Append(KerbinSeaLevelSpecificImpulse);
      }
      if (Propellants != null && __isset.propellants) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Propellants: ");
        __sb.Append(Propellants);
      }
      if (PropellantRatios != null && __isset.propellantRatios) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PropellantRatios: ");
        __sb.Append(PropellantRatios);
      }
      if (__isset.hasFuel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HasFuel: ");
        __sb.Append(HasFuel);
      }
      if (__isset.throttle) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Throttle: ");
        __sb.Append(Throttle);
      }
      if (__isset.throttleLocked) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ThrottleLocked: ");
        __sb.Append(ThrottleLocked);
      }
      if (__isset.canRestart) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CanRestart: ");
        __sb.Append(CanRestart);
      }
      if (__isset.canShutdown) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CanShutdown: ");
        __sb.Append(CanShutdown);
      }
      if (__isset.gimballed) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Gimballed: ");
        __sb.Append(Gimballed);
      }
      if (__isset.gimbalRange) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GimbalRange: ");
        __sb.Append(GimbalRange);
      }
      if (__isset.gimbalLocked) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GimbalLocked: ");
        __sb.Append(GimbalLocked);
      }
      if (__isset.gimbalLimit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GimbalLimit: ");
        __sb.Append(GimbalLimit);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
