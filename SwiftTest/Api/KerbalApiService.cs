/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KerbalApi.Api
{
  public partial class KerbalApiService {
    public interface Iface {
      void evaluateCSCodeNoResponse(string authString);
      #if SILVERLIGHT
      IAsyncResult Begin_evaluateCSCodeNoResponse(AsyncCallback callback, object state, string authString);
      void End_evaluateCSCodeNoResponse(IAsyncResult asyncResult);
      #endif
      bool evaluateCSCode(string authString);
      #if SILVERLIGHT
      IAsyncResult Begin_evaluateCSCode(AsyncCallback callback, object state, string authString);
      bool End_evaluateCSCode(IAsyncResult asyncResult);
      #endif
      Vessel activeVessel(string authString);
      #if SILVERLIGHT
      IAsyncResult Begin_activeVessel(AsyncCallback callback, object state, string authString);
      Vessel End_activeVessel(IAsyncResult asyncResult);
      #endif
      FlightGlobals flightGlobals(string authString);
      #if SILVERLIGHT
      IAsyncResult Begin_flightGlobals(AsyncCallback callback, object state, string authString);
      FlightGlobals End_flightGlobals(IAsyncResult asyncResult);
      #endif
      void zip();
      #if SILVERLIGHT
      IAsyncResult Begin_zip(AsyncCallback callback, object state);
      void End_zip(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_evaluateCSCodeNoResponse(AsyncCallback callback, object state, string authString)
      {
        return send_evaluateCSCodeNoResponse(callback, state, authString);
      }

      public void End_evaluateCSCodeNoResponse(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void evaluateCSCodeNoResponse(string authString)
      {
        #if !SILVERLIGHT
        send_evaluateCSCodeNoResponse(authString);

        #else
        var asyncResult = Begin_evaluateCSCodeNoResponse(null, null, authString);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_evaluateCSCodeNoResponse(AsyncCallback callback, object state, string authString)
      #else
      public void send_evaluateCSCodeNoResponse(string authString)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("evaluateCSCodeNoResponse", TMessageType.Oneway, seqid_));
        evaluateCSCodeNoResponse_args args = new evaluateCSCodeNoResponse_args();
        args.AuthString = authString;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_evaluateCSCode(AsyncCallback callback, object state, string authString)
      {
        return send_evaluateCSCode(callback, state, authString);
      }

      public bool End_evaluateCSCode(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_evaluateCSCode();
      }

      #endif

      public bool evaluateCSCode(string authString)
      {
        #if !SILVERLIGHT
        send_evaluateCSCode(authString);
        return recv_evaluateCSCode();

        #else
        var asyncResult = Begin_evaluateCSCode(null, null, authString);
        return End_evaluateCSCode(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_evaluateCSCode(AsyncCallback callback, object state, string authString)
      #else
      public void send_evaluateCSCode(string authString)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("evaluateCSCode", TMessageType.Call, seqid_));
        evaluateCSCode_args args = new evaluateCSCode_args();
        args.AuthString = authString;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_evaluateCSCode()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        evaluateCSCode_result result = new evaluateCSCode_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aex) {
          throw result.Aex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "evaluateCSCode failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_activeVessel(AsyncCallback callback, object state, string authString)
      {
        return send_activeVessel(callback, state, authString);
      }

      public Vessel End_activeVessel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_activeVessel();
      }

      #endif

      public Vessel activeVessel(string authString)
      {
        #if !SILVERLIGHT
        send_activeVessel(authString);
        return recv_activeVessel();

        #else
        var asyncResult = Begin_activeVessel(null, null, authString);
        return End_activeVessel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_activeVessel(AsyncCallback callback, object state, string authString)
      #else
      public void send_activeVessel(string authString)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("activeVessel", TMessageType.Call, seqid_));
        activeVessel_args args = new activeVessel_args();
        args.AuthString = authString;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Vessel recv_activeVessel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        activeVessel_result result = new activeVessel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aex) {
          throw result.Aex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "activeVessel failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_flightGlobals(AsyncCallback callback, object state, string authString)
      {
        return send_flightGlobals(callback, state, authString);
      }

      public FlightGlobals End_flightGlobals(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_flightGlobals();
      }

      #endif

      public FlightGlobals flightGlobals(string authString)
      {
        #if !SILVERLIGHT
        send_flightGlobals(authString);
        return recv_flightGlobals();

        #else
        var asyncResult = Begin_flightGlobals(null, null, authString);
        return End_flightGlobals(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_flightGlobals(AsyncCallback callback, object state, string authString)
      #else
      public void send_flightGlobals(string authString)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("flightGlobals", TMessageType.Call, seqid_));
        flightGlobals_args args = new flightGlobals_args();
        args.AuthString = authString;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public FlightGlobals recv_flightGlobals()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        flightGlobals_result result = new flightGlobals_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.aex) {
          throw result.Aex;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "flightGlobals failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_zip(AsyncCallback callback, object state)
      {
        return send_zip(callback, state);
      }

      public void End_zip(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void zip()
      {
        #if !SILVERLIGHT
        send_zip();

        #else
        var asyncResult = Begin_zip(null, null);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_zip(AsyncCallback callback, object state)
      #else
      public void send_zip()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("zip", TMessageType.Oneway, seqid_));
        zip_args args = new zip_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["evaluateCSCodeNoResponse"] = evaluateCSCodeNoResponse_Process;
        processMap_["evaluateCSCode"] = evaluateCSCode_Process;
        processMap_["activeVessel"] = activeVessel_Process;
        processMap_["flightGlobals"] = flightGlobals_Process;
        processMap_["zip"] = zip_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void evaluateCSCodeNoResponse_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        evaluateCSCodeNoResponse_args args = new evaluateCSCodeNoResponse_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.evaluateCSCodeNoResponse(args.AuthString);
        return;
      }
      public void evaluateCSCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        evaluateCSCode_args args = new evaluateCSCode_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        evaluateCSCode_result result = new evaluateCSCode_result();
        try {
          result.Success = iface_.evaluateCSCode(args.AuthString);
        } catch (EAuthException aex) {
          result.Aex = aex;
        }
        oprot.WriteMessageBegin(new TMessage("evaluateCSCode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void activeVessel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        activeVessel_args args = new activeVessel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        activeVessel_result result = new activeVessel_result();
        try {
          result.Success = iface_.activeVessel(args.AuthString);
        } catch (EAuthException aex) {
          result.Aex = aex;
        }
        oprot.WriteMessageBegin(new TMessage("activeVessel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void flightGlobals_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        flightGlobals_args args = new flightGlobals_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        flightGlobals_result result = new flightGlobals_result();
        try {
          result.Success = iface_.flightGlobals(args.AuthString);
        } catch (EAuthException aex) {
          result.Aex = aex;
        }
        oprot.WriteMessageBegin(new TMessage("flightGlobals", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void zip_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        zip_args args = new zip_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.zip();
        return;
      }
    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class evaluateCSCodeNoResponse_args : TBase
    {
      private string _authString;

      public string AuthString
      {
        get
        {
          return _authString;
        }
        set
        {
          __isset.authString = true;
          this._authString = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool authString;
      }

      public evaluateCSCodeNoResponse_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AuthString = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("evaluateCSCodeNoResponse_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuthString != null && __isset.authString) {
          field.Name = "authString";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AuthString);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("evaluateCSCodeNoResponse_args(");
        bool __first = true;
        if (AuthString != null && __isset.authString) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthString: ");
          __sb.Append(AuthString);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class evaluateCSCode_args : TBase
    {
      private string _authString;

      public string AuthString
      {
        get
        {
          return _authString;
        }
        set
        {
          __isset.authString = true;
          this._authString = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool authString;
      }

      public evaluateCSCode_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AuthString = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("evaluateCSCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuthString != null && __isset.authString) {
          field.Name = "authString";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AuthString);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("evaluateCSCode_args(");
        bool __first = true;
        if (AuthString != null && __isset.authString) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthString: ");
          __sb.Append(AuthString);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class evaluateCSCode_result : TBase
    {
      private bool _success;
      private EAuthException _aex;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public EAuthException Aex
      {
        get
        {
          return _aex;
        }
        set
        {
          __isset.aex = true;
          this._aex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aex;
      }

      public evaluateCSCode_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aex = new EAuthException();
                Aex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("evaluateCSCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.aex) {
          if (Aex != null) {
            field.Name = "Aex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("evaluateCSCode_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (Aex != null && __isset.aex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Aex: ");
          __sb.Append(Aex== null ? "<null>" : Aex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class activeVessel_args : TBase
    {
      private string _authString;

      public string AuthString
      {
        get
        {
          return _authString;
        }
        set
        {
          __isset.authString = true;
          this._authString = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool authString;
      }

      public activeVessel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AuthString = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("activeVessel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuthString != null && __isset.authString) {
          field.Name = "authString";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AuthString);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("activeVessel_args(");
        bool __first = true;
        if (AuthString != null && __isset.authString) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthString: ");
          __sb.Append(AuthString);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class activeVessel_result : TBase
    {
      private Vessel _success;
      private EAuthException _aex;

      public Vessel Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public EAuthException Aex
      {
        get
        {
          return _aex;
        }
        set
        {
          __isset.aex = true;
          this._aex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aex;
      }

      public activeVessel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Vessel();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aex = new EAuthException();
                Aex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("activeVessel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aex) {
          if (Aex != null) {
            field.Name = "Aex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("activeVessel_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Aex != null && __isset.aex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Aex: ");
          __sb.Append(Aex== null ? "<null>" : Aex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class flightGlobals_args : TBase
    {
      private string _authString;

      public string AuthString
      {
        get
        {
          return _authString;
        }
        set
        {
          __isset.authString = true;
          this._authString = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool authString;
      }

      public flightGlobals_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                AuthString = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("flightGlobals_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (AuthString != null && __isset.authString) {
          field.Name = "authString";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AuthString);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("flightGlobals_args(");
        bool __first = true;
        if (AuthString != null && __isset.authString) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("AuthString: ");
          __sb.Append(AuthString);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class flightGlobals_result : TBase
    {
      private FlightGlobals _success;
      private EAuthException _aex;

      public FlightGlobals Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public EAuthException Aex
      {
        get
        {
          return _aex;
        }
        set
        {
          __isset.aex = true;
          this._aex = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool aex;
      }

      public flightGlobals_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FlightGlobals();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Aex = new EAuthException();
                Aex.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("flightGlobals_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.aex) {
          if (Aex != null) {
            field.Name = "Aex";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Aex.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("flightGlobals_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (Aex != null && __isset.aex) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Aex: ");
          __sb.Append(Aex== null ? "<null>" : Aex.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class zip_args : TBase
    {

      public zip_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("zip_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("zip_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
