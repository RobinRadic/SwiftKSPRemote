/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KerbalApi.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Part : TBase
  {
    private long _id;
    private string _name;
    private string _title;
    private double _cost;
    private PartStates _state;
    private long _parentId;
    private List<long> _children;
    private bool _axiallyAttached;
    private bool _radiallyAttached;
    private int _stage;
    private int _decoupleStage;
    private bool _massless;
    private double _mass;
    private double _dryMass;
    private double _impactTolerance;
    private double _temperature;
    private double _maxTemperature;
    private bool _crossfeed;
    private List<long> _fuelLinesFrom;
    private List<long> _fuelLinesTo;
    private List<Module> _modules;
    private bool _isDecoupler;
    private bool _isDockingPort;
    private bool _isEngine;
    private bool _isLandingGear;
    private bool _isLandingLeg;
    private bool _isLaunchClamp;
    private bool _isLight;
    private bool _isParachute;
    private bool _isSensor;
    private bool _isReactionWheel;
    private bool _isSolarPanel;
    private Decoupler _decoupler;
    private DockingPort _dockingPort;
    private Engine _engine;
    private LandingGear _landingGear;
    private LandingLeg _landingLeg;
    private LaunchClamp _launchClamp;
    private Light _light;
    private Parachute _parachute;
    private Sensor _sensor;
    private ReactionWheel _reactionWheel;
    private SolarPanel _solarPanel;

    public long Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public double Cost
    {
      get
      {
        return _cost;
      }
      set
      {
        __isset.cost = true;
        this._cost = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="PartStates"/>
    /// </summary>
    public PartStates State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    public long ParentId
    {
      get
      {
        return _parentId;
      }
      set
      {
        __isset.parentId = true;
        this._parentId = value;
      }
    }

    public List<long> Children
    {
      get
      {
        return _children;
      }
      set
      {
        __isset.children = true;
        this._children = value;
      }
    }

    public bool AxiallyAttached
    {
      get
      {
        return _axiallyAttached;
      }
      set
      {
        __isset.axiallyAttached = true;
        this._axiallyAttached = value;
      }
    }

    public bool RadiallyAttached
    {
      get
      {
        return _radiallyAttached;
      }
      set
      {
        __isset.radiallyAttached = true;
        this._radiallyAttached = value;
      }
    }

    public int Stage
    {
      get
      {
        return _stage;
      }
      set
      {
        __isset.stage = true;
        this._stage = value;
      }
    }

    public int DecoupleStage
    {
      get
      {
        return _decoupleStage;
      }
      set
      {
        __isset.decoupleStage = true;
        this._decoupleStage = value;
      }
    }

    public bool Massless
    {
      get
      {
        return _massless;
      }
      set
      {
        __isset.massless = true;
        this._massless = value;
      }
    }

    public double Mass
    {
      get
      {
        return _mass;
      }
      set
      {
        __isset.mass = true;
        this._mass = value;
      }
    }

    public double DryMass
    {
      get
      {
        return _dryMass;
      }
      set
      {
        __isset.dryMass = true;
        this._dryMass = value;
      }
    }

    public double ImpactTolerance
    {
      get
      {
        return _impactTolerance;
      }
      set
      {
        __isset.impactTolerance = true;
        this._impactTolerance = value;
      }
    }

    public double Temperature
    {
      get
      {
        return _temperature;
      }
      set
      {
        __isset.temperature = true;
        this._temperature = value;
      }
    }

    public double MaxTemperature
    {
      get
      {
        return _maxTemperature;
      }
      set
      {
        __isset.maxTemperature = true;
        this._maxTemperature = value;
      }
    }

    public bool Crossfeed
    {
      get
      {
        return _crossfeed;
      }
      set
      {
        __isset.crossfeed = true;
        this._crossfeed = value;
      }
    }

    public List<long> FuelLinesFrom
    {
      get
      {
        return _fuelLinesFrom;
      }
      set
      {
        __isset.fuelLinesFrom = true;
        this._fuelLinesFrom = value;
      }
    }

    public List<long> FuelLinesTo
    {
      get
      {
        return _fuelLinesTo;
      }
      set
      {
        __isset.fuelLinesTo = true;
        this._fuelLinesTo = value;
      }
    }

    public List<Module> Modules
    {
      get
      {
        return _modules;
      }
      set
      {
        __isset.modules = true;
        this._modules = value;
      }
    }

    public bool IsDecoupler
    {
      get
      {
        return _isDecoupler;
      }
      set
      {
        __isset.isDecoupler = true;
        this._isDecoupler = value;
      }
    }

    public bool IsDockingPort
    {
      get
      {
        return _isDockingPort;
      }
      set
      {
        __isset.isDockingPort = true;
        this._isDockingPort = value;
      }
    }

    public bool IsEngine
    {
      get
      {
        return _isEngine;
      }
      set
      {
        __isset.isEngine = true;
        this._isEngine = value;
      }
    }

    public bool IsLandingGear
    {
      get
      {
        return _isLandingGear;
      }
      set
      {
        __isset.isLandingGear = true;
        this._isLandingGear = value;
      }
    }

    public bool IsLandingLeg
    {
      get
      {
        return _isLandingLeg;
      }
      set
      {
        __isset.isLandingLeg = true;
        this._isLandingLeg = value;
      }
    }

    public bool IsLaunchClamp
    {
      get
      {
        return _isLaunchClamp;
      }
      set
      {
        __isset.isLaunchClamp = true;
        this._isLaunchClamp = value;
      }
    }

    public bool IsLight
    {
      get
      {
        return _isLight;
      }
      set
      {
        __isset.isLight = true;
        this._isLight = value;
      }
    }

    public bool IsParachute
    {
      get
      {
        return _isParachute;
      }
      set
      {
        __isset.isParachute = true;
        this._isParachute = value;
      }
    }

    public bool IsSensor
    {
      get
      {
        return _isSensor;
      }
      set
      {
        __isset.isSensor = true;
        this._isSensor = value;
      }
    }

    public bool IsReactionWheel
    {
      get
      {
        return _isReactionWheel;
      }
      set
      {
        __isset.isReactionWheel = true;
        this._isReactionWheel = value;
      }
    }

    public bool IsSolarPanel
    {
      get
      {
        return _isSolarPanel;
      }
      set
      {
        __isset.isSolarPanel = true;
        this._isSolarPanel = value;
      }
    }

    public Decoupler Decoupler
    {
      get
      {
        return _decoupler;
      }
      set
      {
        __isset.decoupler = true;
        this._decoupler = value;
      }
    }

    public DockingPort DockingPort
    {
      get
      {
        return _dockingPort;
      }
      set
      {
        __isset.dockingPort = true;
        this._dockingPort = value;
      }
    }

    public Engine Engine
    {
      get
      {
        return _engine;
      }
      set
      {
        __isset.engine = true;
        this._engine = value;
      }
    }

    public LandingGear LandingGear
    {
      get
      {
        return _landingGear;
      }
      set
      {
        __isset.landingGear = true;
        this._landingGear = value;
      }
    }

    public LandingLeg LandingLeg
    {
      get
      {
        return _landingLeg;
      }
      set
      {
        __isset.landingLeg = true;
        this._landingLeg = value;
      }
    }

    public LaunchClamp LaunchClamp
    {
      get
      {
        return _launchClamp;
      }
      set
      {
        __isset.launchClamp = true;
        this._launchClamp = value;
      }
    }

    public Light Light
    {
      get
      {
        return _light;
      }
      set
      {
        __isset.light = true;
        this._light = value;
      }
    }

    public Parachute Parachute
    {
      get
      {
        return _parachute;
      }
      set
      {
        __isset.parachute = true;
        this._parachute = value;
      }
    }

    public Sensor Sensor
    {
      get
      {
        return _sensor;
      }
      set
      {
        __isset.sensor = true;
        this._sensor = value;
      }
    }

    public ReactionWheel ReactionWheel
    {
      get
      {
        return _reactionWheel;
      }
      set
      {
        __isset.reactionWheel = true;
        this._reactionWheel = value;
      }
    }

    public SolarPanel SolarPanel
    {
      get
      {
        return _solarPanel;
      }
      set
      {
        __isset.solarPanel = true;
        this._solarPanel = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool name;
      public bool title;
      public bool cost;
      public bool state;
      public bool parentId;
      public bool children;
      public bool axiallyAttached;
      public bool radiallyAttached;
      public bool stage;
      public bool decoupleStage;
      public bool massless;
      public bool mass;
      public bool dryMass;
      public bool impactTolerance;
      public bool temperature;
      public bool maxTemperature;
      public bool crossfeed;
      public bool fuelLinesFrom;
      public bool fuelLinesTo;
      public bool modules;
      public bool isDecoupler;
      public bool isDockingPort;
      public bool isEngine;
      public bool isLandingGear;
      public bool isLandingLeg;
      public bool isLaunchClamp;
      public bool isLight;
      public bool isParachute;
      public bool isSensor;
      public bool isReactionWheel;
      public bool isSolarPanel;
      public bool decoupler;
      public bool dockingPort;
      public bool engine;
      public bool landingGear;
      public bool landingLeg;
      public bool launchClamp;
      public bool light;
      public bool parachute;
      public bool sensor;
      public bool reactionWheel;
      public bool solarPanel;
    }

    public Part() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Id = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Cost = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              State = (PartStates)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              ParentId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                Children = new List<long>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  long _elem11;
                  _elem11 = iprot.ReadI64();
                  Children.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Bool) {
              AxiallyAttached = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Bool) {
              RadiallyAttached = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.I32) {
              Stage = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.I32) {
              DecoupleStage = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.Bool) {
              Massless = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.Double) {
              Mass = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.Double) {
              DryMass = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.Double) {
              ImpactTolerance = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.Double) {
              Temperature = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Double) {
              MaxTemperature = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.Bool) {
              Crossfeed = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.List) {
              {
                FuelLinesFrom = new List<long>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  long _elem14;
                  _elem14 = iprot.ReadI64();
                  FuelLinesFrom.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.List) {
              {
                FuelLinesTo = new List<long>();
                TList _list15 = iprot.ReadListBegin();
                for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  long _elem17;
                  _elem17 = iprot.ReadI64();
                  FuelLinesTo.Add(_elem17);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 34:
            if (field.Type == TType.List) {
              {
                Modules = new List<Module>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  Module _elem20;
                  _elem20 = new Module();
                  _elem20.Read(iprot);
                  Modules.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 51:
            if (field.Type == TType.Bool) {
              IsDecoupler = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 52:
            if (field.Type == TType.Bool) {
              IsDockingPort = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 53:
            if (field.Type == TType.Bool) {
              IsEngine = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 54:
            if (field.Type == TType.Bool) {
              IsLandingGear = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 55:
            if (field.Type == TType.Bool) {
              IsLandingLeg = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 56:
            if (field.Type == TType.Bool) {
              IsLaunchClamp = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 57:
            if (field.Type == TType.Bool) {
              IsLight = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 58:
            if (field.Type == TType.Bool) {
              IsParachute = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 59:
            if (field.Type == TType.Bool) {
              IsSensor = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.Bool) {
              IsReactionWheel = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 61:
            if (field.Type == TType.Bool) {
              IsSolarPanel = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 81:
            if (field.Type == TType.Struct) {
              Decoupler = new Decoupler();
              Decoupler.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 82:
            if (field.Type == TType.Struct) {
              DockingPort = new DockingPort();
              DockingPort.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 83:
            if (field.Type == TType.Struct) {
              Engine = new Engine();
              Engine.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 84:
            if (field.Type == TType.Struct) {
              LandingGear = new LandingGear();
              LandingGear.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 85:
            if (field.Type == TType.Struct) {
              LandingLeg = new LandingLeg();
              LandingLeg.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 86:
            if (field.Type == TType.Struct) {
              LaunchClamp = new LaunchClamp();
              LaunchClamp.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 87:
            if (field.Type == TType.Struct) {
              Light = new Light();
              Light.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 88:
            if (field.Type == TType.Struct) {
              Parachute = new Parachute();
              Parachute.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 89:
            if (field.Type == TType.Struct) {
              Sensor = new Sensor();
              Sensor.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.Struct) {
              ReactionWheel = new ReactionWheel();
              ReactionWheel.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 91:
            if (field.Type == TType.Struct) {
              SolarPanel = new SolarPanel();
              SolarPanel.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Part");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (__isset.cost) {
        field.Name = "cost";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Cost);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)State);
        oprot.WriteFieldEnd();
      }
      if (__isset.parentId) {
        field.Name = "parentId";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ParentId);
        oprot.WriteFieldEnd();
      }
      if (Children != null && __isset.children) {
        field.Name = "children";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, Children.Count));
          foreach (long _iter21 in Children)
          {
            oprot.WriteI64(_iter21);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.axiallyAttached) {
        field.Name = "axiallyAttached";
        field.Type = TType.Bool;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(AxiallyAttached);
        oprot.WriteFieldEnd();
      }
      if (__isset.radiallyAttached) {
        field.Name = "radiallyAttached";
        field.Type = TType.Bool;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(RadiallyAttached);
        oprot.WriteFieldEnd();
      }
      if (__isset.stage) {
        field.Name = "stage";
        field.Type = TType.I32;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Stage);
        oprot.WriteFieldEnd();
      }
      if (__isset.decoupleStage) {
        field.Name = "decoupleStage";
        field.Type = TType.I32;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DecoupleStage);
        oprot.WriteFieldEnd();
      }
      if (__isset.massless) {
        field.Name = "massless";
        field.Type = TType.Bool;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Massless);
        oprot.WriteFieldEnd();
      }
      if (__isset.mass) {
        field.Name = "mass";
        field.Type = TType.Double;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Mass);
        oprot.WriteFieldEnd();
      }
      if (__isset.dryMass) {
        field.Name = "dryMass";
        field.Type = TType.Double;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(DryMass);
        oprot.WriteFieldEnd();
      }
      if (__isset.impactTolerance) {
        field.Name = "impactTolerance";
        field.Type = TType.Double;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ImpactTolerance);
        oprot.WriteFieldEnd();
      }
      if (__isset.temperature) {
        field.Name = "temperature";
        field.Type = TType.Double;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Temperature);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxTemperature) {
        field.Name = "maxTemperature";
        field.Type = TType.Double;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(MaxTemperature);
        oprot.WriteFieldEnd();
      }
      if (__isset.crossfeed) {
        field.Name = "crossfeed";
        field.Type = TType.Bool;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Crossfeed);
        oprot.WriteFieldEnd();
      }
      if (FuelLinesFrom != null && __isset.fuelLinesFrom) {
        field.Name = "fuelLinesFrom";
        field.Type = TType.List;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, FuelLinesFrom.Count));
          foreach (long _iter22 in FuelLinesFrom)
          {
            oprot.WriteI64(_iter22);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (FuelLinesTo != null && __isset.fuelLinesTo) {
        field.Name = "fuelLinesTo";
        field.Type = TType.List;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, FuelLinesTo.Count));
          foreach (long _iter23 in FuelLinesTo)
          {
            oprot.WriteI64(_iter23);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Modules != null && __isset.modules) {
        field.Name = "modules";
        field.Type = TType.List;
        field.ID = 34;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Modules.Count));
          foreach (Module _iter24 in Modules)
          {
            _iter24.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.isDecoupler) {
        field.Name = "isDecoupler";
        field.Type = TType.Bool;
        field.ID = 51;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsDecoupler);
        oprot.WriteFieldEnd();
      }
      if (__isset.isDockingPort) {
        field.Name = "isDockingPort";
        field.Type = TType.Bool;
        field.ID = 52;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsDockingPort);
        oprot.WriteFieldEnd();
      }
      if (__isset.isEngine) {
        field.Name = "isEngine";
        field.Type = TType.Bool;
        field.ID = 53;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsEngine);
        oprot.WriteFieldEnd();
      }
      if (__isset.isLandingGear) {
        field.Name = "isLandingGear";
        field.Type = TType.Bool;
        field.ID = 54;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsLandingGear);
        oprot.WriteFieldEnd();
      }
      if (__isset.isLandingLeg) {
        field.Name = "isLandingLeg";
        field.Type = TType.Bool;
        field.ID = 55;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsLandingLeg);
        oprot.WriteFieldEnd();
      }
      if (__isset.isLaunchClamp) {
        field.Name = "isLaunchClamp";
        field.Type = TType.Bool;
        field.ID = 56;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsLaunchClamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.isLight) {
        field.Name = "isLight";
        field.Type = TType.Bool;
        field.ID = 57;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsLight);
        oprot.WriteFieldEnd();
      }
      if (__isset.isParachute) {
        field.Name = "isParachute";
        field.Type = TType.Bool;
        field.ID = 58;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsParachute);
        oprot.WriteFieldEnd();
      }
      if (__isset.isSensor) {
        field.Name = "isSensor";
        field.Type = TType.Bool;
        field.ID = 59;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsSensor);
        oprot.WriteFieldEnd();
      }
      if (__isset.isReactionWheel) {
        field.Name = "isReactionWheel";
        field.Type = TType.Bool;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsReactionWheel);
        oprot.WriteFieldEnd();
      }
      if (__isset.isSolarPanel) {
        field.Name = "isSolarPanel";
        field.Type = TType.Bool;
        field.ID = 61;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsSolarPanel);
        oprot.WriteFieldEnd();
      }
      if (Decoupler != null && __isset.decoupler) {
        field.Name = "decoupler";
        field.Type = TType.Struct;
        field.ID = 81;
        oprot.WriteFieldBegin(field);
        Decoupler.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (DockingPort != null && __isset.dockingPort) {
        field.Name = "dockingPort";
        field.Type = TType.Struct;
        field.ID = 82;
        oprot.WriteFieldBegin(field);
        DockingPort.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Engine != null && __isset.engine) {
        field.Name = "engine";
        field.Type = TType.Struct;
        field.ID = 83;
        oprot.WriteFieldBegin(field);
        Engine.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (LandingGear != null && __isset.landingGear) {
        field.Name = "landingGear";
        field.Type = TType.Struct;
        field.ID = 84;
        oprot.WriteFieldBegin(field);
        LandingGear.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (LandingLeg != null && __isset.landingLeg) {
        field.Name = "landingLeg";
        field.Type = TType.Struct;
        field.ID = 85;
        oprot.WriteFieldBegin(field);
        LandingLeg.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (LaunchClamp != null && __isset.launchClamp) {
        field.Name = "launchClamp";
        field.Type = TType.Struct;
        field.ID = 86;
        oprot.WriteFieldBegin(field);
        LaunchClamp.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Light != null && __isset.light) {
        field.Name = "light";
        field.Type = TType.Struct;
        field.ID = 87;
        oprot.WriteFieldBegin(field);
        Light.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Parachute != null && __isset.parachute) {
        field.Name = "parachute";
        field.Type = TType.Struct;
        field.ID = 88;
        oprot.WriteFieldBegin(field);
        Parachute.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Sensor != null && __isset.sensor) {
        field.Name = "sensor";
        field.Type = TType.Struct;
        field.ID = 89;
        oprot.WriteFieldBegin(field);
        Sensor.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ReactionWheel != null && __isset.reactionWheel) {
        field.Name = "reactionWheel";
        field.Type = TType.Struct;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        ReactionWheel.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (SolarPanel != null && __isset.solarPanel) {
        field.Name = "solarPanel";
        field.Type = TType.Struct;
        field.ID = 91;
        oprot.WriteFieldBegin(field);
        SolarPanel.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Part(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Title != null && __isset.title) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Title: ");
        __sb.Append(Title);
      }
      if (__isset.cost) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cost: ");
        __sb.Append(Cost);
      }
      if (__isset.state) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("State: ");
        __sb.Append(State);
      }
      if (__isset.parentId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ParentId: ");
        __sb.Append(ParentId);
      }
      if (Children != null && __isset.children) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Children: ");
        __sb.Append(Children);
      }
      if (__isset.axiallyAttached) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AxiallyAttached: ");
        __sb.Append(AxiallyAttached);
      }
      if (__isset.radiallyAttached) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RadiallyAttached: ");
        __sb.Append(RadiallyAttached);
      }
      if (__isset.stage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Stage: ");
        __sb.Append(Stage);
      }
      if (__isset.decoupleStage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DecoupleStage: ");
        __sb.Append(DecoupleStage);
      }
      if (__isset.massless) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Massless: ");
        __sb.Append(Massless);
      }
      if (__isset.mass) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mass: ");
        __sb.Append(Mass);
      }
      if (__isset.dryMass) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DryMass: ");
        __sb.Append(DryMass);
      }
      if (__isset.impactTolerance) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImpactTolerance: ");
        __sb.Append(ImpactTolerance);
      }
      if (__isset.temperature) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Temperature: ");
        __sb.Append(Temperature);
      }
      if (__isset.maxTemperature) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxTemperature: ");
        __sb.Append(MaxTemperature);
      }
      if (__isset.crossfeed) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Crossfeed: ");
        __sb.Append(Crossfeed);
      }
      if (FuelLinesFrom != null && __isset.fuelLinesFrom) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FuelLinesFrom: ");
        __sb.Append(FuelLinesFrom);
      }
      if (FuelLinesTo != null && __isset.fuelLinesTo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FuelLinesTo: ");
        __sb.Append(FuelLinesTo);
      }
      if (Modules != null && __isset.modules) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Modules: ");
        __sb.Append(Modules);
      }
      if (__isset.isDecoupler) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsDecoupler: ");
        __sb.Append(IsDecoupler);
      }
      if (__isset.isDockingPort) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsDockingPort: ");
        __sb.Append(IsDockingPort);
      }
      if (__isset.isEngine) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsEngine: ");
        __sb.Append(IsEngine);
      }
      if (__isset.isLandingGear) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsLandingGear: ");
        __sb.Append(IsLandingGear);
      }
      if (__isset.isLandingLeg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsLandingLeg: ");
        __sb.Append(IsLandingLeg);
      }
      if (__isset.isLaunchClamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsLaunchClamp: ");
        __sb.Append(IsLaunchClamp);
      }
      if (__isset.isLight) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsLight: ");
        __sb.Append(IsLight);
      }
      if (__isset.isParachute) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsParachute: ");
        __sb.Append(IsParachute);
      }
      if (__isset.isSensor) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsSensor: ");
        __sb.Append(IsSensor);
      }
      if (__isset.isReactionWheel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsReactionWheel: ");
        __sb.Append(IsReactionWheel);
      }
      if (__isset.isSolarPanel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsSolarPanel: ");
        __sb.Append(IsSolarPanel);
      }
      if (Decoupler != null && __isset.decoupler) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Decoupler: ");
        __sb.Append(Decoupler== null ? "<null>" : Decoupler.ToString());
      }
      if (DockingPort != null && __isset.dockingPort) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DockingPort: ");
        __sb.Append(DockingPort== null ? "<null>" : DockingPort.ToString());
      }
      if (Engine != null && __isset.engine) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Engine: ");
        __sb.Append(Engine== null ? "<null>" : Engine.ToString());
      }
      if (LandingGear != null && __isset.landingGear) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LandingGear: ");
        __sb.Append(LandingGear== null ? "<null>" : LandingGear.ToString());
      }
      if (LandingLeg != null && __isset.landingLeg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LandingLeg: ");
        __sb.Append(LandingLeg== null ? "<null>" : LandingLeg.ToString());
      }
      if (LaunchClamp != null && __isset.launchClamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LaunchClamp: ");
        __sb.Append(LaunchClamp== null ? "<null>" : LaunchClamp.ToString());
      }
      if (Light != null && __isset.light) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Light: ");
        __sb.Append(Light== null ? "<null>" : Light.ToString());
      }
      if (Parachute != null && __isset.parachute) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Parachute: ");
        __sb.Append(Parachute== null ? "<null>" : Parachute.ToString());
      }
      if (Sensor != null && __isset.sensor) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sensor: ");
        __sb.Append(Sensor== null ? "<null>" : Sensor.ToString());
      }
      if (ReactionWheel != null && __isset.reactionWheel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReactionWheel: ");
        __sb.Append(ReactionWheel== null ? "<null>" : ReactionWheel.ToString());
      }
      if (SolarPanel != null && __isset.solarPanel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SolarPanel: ");
        __sb.Append(SolarPanel== null ? "<null>" : SolarPanel.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
