/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KerbalApi.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CelestialBody : TBase
  {
    private string _name;
    private double _mass;
    private List<CelestialBody> _sattelites;
    private double _gravitationalParameter;
    private double _surfaceGravity;
    private double _rotationalSpeed;
    private double _rotationPeriod;
    private double _equatorialRadius;
    private double _sphereOfInfluence;
    private bool _hasAtmosphere;
    private double _atmosphereDepth;
    private bool _hasAtmosphericOxygen;
    private Orbit _orbit;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public double Mass
    {
      get
      {
        return _mass;
      }
      set
      {
        __isset.mass = true;
        this._mass = value;
      }
    }

    public List<CelestialBody> Sattelites
    {
      get
      {
        return _sattelites;
      }
      set
      {
        __isset.sattelites = true;
        this._sattelites = value;
      }
    }

    public double GravitationalParameter
    {
      get
      {
        return _gravitationalParameter;
      }
      set
      {
        __isset.gravitationalParameter = true;
        this._gravitationalParameter = value;
      }
    }

    public double SurfaceGravity
    {
      get
      {
        return _surfaceGravity;
      }
      set
      {
        __isset.surfaceGravity = true;
        this._surfaceGravity = value;
      }
    }

    public double RotationalSpeed
    {
      get
      {
        return _rotationalSpeed;
      }
      set
      {
        __isset.rotationalSpeed = true;
        this._rotationalSpeed = value;
      }
    }

    public double RotationPeriod
    {
      get
      {
        return _rotationPeriod;
      }
      set
      {
        __isset.rotationPeriod = true;
        this._rotationPeriod = value;
      }
    }

    public double EquatorialRadius
    {
      get
      {
        return _equatorialRadius;
      }
      set
      {
        __isset.equatorialRadius = true;
        this._equatorialRadius = value;
      }
    }

    public double SphereOfInfluence
    {
      get
      {
        return _sphereOfInfluence;
      }
      set
      {
        __isset.sphereOfInfluence = true;
        this._sphereOfInfluence = value;
      }
    }

    public bool HasAtmosphere
    {
      get
      {
        return _hasAtmosphere;
      }
      set
      {
        __isset.hasAtmosphere = true;
        this._hasAtmosphere = value;
      }
    }

    public double AtmosphereDepth
    {
      get
      {
        return _atmosphereDepth;
      }
      set
      {
        __isset.atmosphereDepth = true;
        this._atmosphereDepth = value;
      }
    }

    public bool HasAtmosphericOxygen
    {
      get
      {
        return _hasAtmosphericOxygen;
      }
      set
      {
        __isset.hasAtmosphericOxygen = true;
        this._hasAtmosphericOxygen = value;
      }
    }

    public Orbit Orbit
    {
      get
      {
        return _orbit;
      }
      set
      {
        __isset.orbit = true;
        this._orbit = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool mass;
      public bool sattelites;
      public bool gravitationalParameter;
      public bool surfaceGravity;
      public bool rotationalSpeed;
      public bool rotationPeriod;
      public bool equatorialRadius;
      public bool sphereOfInfluence;
      public bool hasAtmosphere;
      public bool atmosphereDepth;
      public bool hasAtmosphericOxygen;
      public bool orbit;
    }

    public CelestialBody() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              Mass = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Sattelites = new List<CelestialBody>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  CelestialBody _elem2;
                  _elem2 = new CelestialBody();
                  _elem2.Read(iprot);
                  Sattelites.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              GravitationalParameter = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              SurfaceGravity = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              RotationalSpeed = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              RotationPeriod = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              EquatorialRadius = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Double) {
              SphereOfInfluence = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              HasAtmosphere = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Double) {
              AtmosphereDepth = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Bool) {
              HasAtmosphericOxygen = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Struct) {
              Orbit = new Orbit();
              Orbit.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CelestialBody");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.mass) {
        field.Name = "mass";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Mass);
        oprot.WriteFieldEnd();
      }
      if (Sattelites != null && __isset.sattelites) {
        field.Name = "sattelites";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Sattelites.Count));
          foreach (CelestialBody _iter3 in Sattelites)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.gravitationalParameter) {
        field.Name = "gravitationalParameter";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(GravitationalParameter);
        oprot.WriteFieldEnd();
      }
      if (__isset.surfaceGravity) {
        field.Name = "surfaceGravity";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(SurfaceGravity);
        oprot.WriteFieldEnd();
      }
      if (__isset.rotationalSpeed) {
        field.Name = "rotationalSpeed";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(RotationalSpeed);
        oprot.WriteFieldEnd();
      }
      if (__isset.rotationPeriod) {
        field.Name = "rotationPeriod";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(RotationPeriod);
        oprot.WriteFieldEnd();
      }
      if (__isset.equatorialRadius) {
        field.Name = "equatorialRadius";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(EquatorialRadius);
        oprot.WriteFieldEnd();
      }
      if (__isset.sphereOfInfluence) {
        field.Name = "sphereOfInfluence";
        field.Type = TType.Double;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(SphereOfInfluence);
        oprot.WriteFieldEnd();
      }
      if (__isset.hasAtmosphere) {
        field.Name = "hasAtmosphere";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasAtmosphere);
        oprot.WriteFieldEnd();
      }
      if (__isset.atmosphereDepth) {
        field.Name = "atmosphereDepth";
        field.Type = TType.Double;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(AtmosphereDepth);
        oprot.WriteFieldEnd();
      }
      if (__isset.hasAtmosphericOxygen) {
        field.Name = "hasAtmosphericOxygen";
        field.Type = TType.Bool;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasAtmosphericOxygen);
        oprot.WriteFieldEnd();
      }
      if (Orbit != null && __isset.orbit) {
        field.Name = "orbit";
        field.Type = TType.Struct;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        Orbit.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("CelestialBody(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.mass) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mass: ");
        __sb.Append(Mass);
      }
      if (Sattelites != null && __isset.sattelites) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sattelites: ");
        __sb.Append(Sattelites);
      }
      if (__isset.gravitationalParameter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GravitationalParameter: ");
        __sb.Append(GravitationalParameter);
      }
      if (__isset.surfaceGravity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SurfaceGravity: ");
        __sb.Append(SurfaceGravity);
      }
      if (__isset.rotationalSpeed) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RotationalSpeed: ");
        __sb.Append(RotationalSpeed);
      }
      if (__isset.rotationPeriod) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RotationPeriod: ");
        __sb.Append(RotationPeriod);
      }
      if (__isset.equatorialRadius) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EquatorialRadius: ");
        __sb.Append(EquatorialRadius);
      }
      if (__isset.sphereOfInfluence) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SphereOfInfluence: ");
        __sb.Append(SphereOfInfluence);
      }
      if (__isset.hasAtmosphere) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HasAtmosphere: ");
        __sb.Append(HasAtmosphere);
      }
      if (__isset.atmosphereDepth) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AtmosphereDepth: ");
        __sb.Append(AtmosphereDepth);
      }
      if (__isset.hasAtmosphericOxygen) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HasAtmosphericOxygen: ");
        __sb.Append(HasAtmosphericOxygen);
      }
      if (Orbit != null && __isset.orbit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Orbit: ");
        __sb.Append(Orbit);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
