/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KerbalApi.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ReactionWheel : TBase
  {
    private bool _active;
    private bool _broken;
    private double _pitchTorque;
    private double _yawTorque;
    private double _rollTorque;
    private long _partId;

    public bool Active
    {
      get
      {
        return _active;
      }
      set
      {
        __isset.active = true;
        this._active = value;
      }
    }

    public bool Broken
    {
      get
      {
        return _broken;
      }
      set
      {
        __isset.broken = true;
        this._broken = value;
      }
    }

    public double PitchTorque
    {
      get
      {
        return _pitchTorque;
      }
      set
      {
        __isset.pitchTorque = true;
        this._pitchTorque = value;
      }
    }

    public double YawTorque
    {
      get
      {
        return _yawTorque;
      }
      set
      {
        __isset.yawTorque = true;
        this._yawTorque = value;
      }
    }

    public double RollTorque
    {
      get
      {
        return _rollTorque;
      }
      set
      {
        __isset.rollTorque = true;
        this._rollTorque = value;
      }
    }

    public long PartId
    {
      get
      {
        return _partId;
      }
      set
      {
        __isset.partId = true;
        this._partId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool active;
      public bool broken;
      public bool pitchTorque;
      public bool yawTorque;
      public bool rollTorque;
      public bool partId;
    }

    public ReactionWheel() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Active = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              Broken = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              PitchTorque = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              YawTorque = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              RollTorque = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              PartId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ReactionWheel");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.active) {
        field.Name = "active";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Active);
        oprot.WriteFieldEnd();
      }
      if (__isset.broken) {
        field.Name = "broken";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Broken);
        oprot.WriteFieldEnd();
      }
      if (__isset.pitchTorque) {
        field.Name = "pitchTorque";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(PitchTorque);
        oprot.WriteFieldEnd();
      }
      if (__isset.yawTorque) {
        field.Name = "yawTorque";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(YawTorque);
        oprot.WriteFieldEnd();
      }
      if (__isset.rollTorque) {
        field.Name = "rollTorque";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(RollTorque);
        oprot.WriteFieldEnd();
      }
      if (__isset.partId) {
        field.Name = "partId";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PartId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ReactionWheel(");
      bool __first = true;
      if (__isset.active) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Active: ");
        __sb.Append(Active);
      }
      if (__isset.broken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Broken: ");
        __sb.Append(Broken);
      }
      if (__isset.pitchTorque) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PitchTorque: ");
        __sb.Append(PitchTorque);
      }
      if (__isset.yawTorque) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("YawTorque: ");
        __sb.Append(YawTorque);
      }
      if (__isset.rollTorque) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RollTorque: ");
        __sb.Append(RollTorque);
      }
      if (__isset.partId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PartId: ");
        __sb.Append(PartId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
