/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace KerbalApi.Api
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FlightGlobals : TBase
  {
    private Vessel _activeVessel;
    private List<Vessel> _vessels;
    private List<KerbalApi.Api.CelestialBody> _bodies;
    private KerbalApi.Api.CelestialBody _currentMainBody;
    private KerbalApi.Api.Part _activeTarget;

    public Vessel ActiveVessel
    {
      get
      {
        return _activeVessel;
      }
      set
      {
        __isset.activeVessel = true;
        this._activeVessel = value;
      }
    }

    public List<Vessel> Vessels
    {
      get
      {
        return _vessels;
      }
      set
      {
        __isset.vessels = true;
        this._vessels = value;
      }
    }

    public List<KerbalApi.Api.CelestialBody> Bodies
    {
      get
      {
        return _bodies;
      }
      set
      {
        __isset.bodies = true;
        this._bodies = value;
      }
    }

    public KerbalApi.Api.CelestialBody CurrentMainBody
    {
      get
      {
        return _currentMainBody;
      }
      set
      {
        __isset.currentMainBody = true;
        this._currentMainBody = value;
      }
    }

    public KerbalApi.Api.Part ActiveTarget
    {
      get
      {
        return _activeTarget;
      }
      set
      {
        __isset.activeTarget = true;
        this._activeTarget = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool activeVessel;
      public bool vessels;
      public bool bodies;
      public bool currentMainBody;
      public bool activeTarget;
    }

    public FlightGlobals() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              ActiveVessel = new Vessel();
              ActiveVessel.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Vessels = new List<Vessel>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  Vessel _elem2;
                  _elem2 = new Vessel();
                  _elem2.Read(iprot);
                  Vessels.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Bodies = new List<KerbalApi.Api.CelestialBody>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  KerbalApi.Api.CelestialBody _elem5;
                  _elem5 = new KerbalApi.Api.CelestialBody();
                  _elem5.Read(iprot);
                  Bodies.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              CurrentMainBody = new KerbalApi.Api.CelestialBody();
              CurrentMainBody.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Struct) {
              ActiveTarget = new KerbalApi.Api.Part();
              ActiveTarget.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FlightGlobals");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ActiveVessel != null && __isset.activeVessel) {
        field.Name = "activeVessel";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        ActiveVessel.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Vessels != null && __isset.vessels) {
        field.Name = "vessels";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Vessels.Count));
          foreach (Vessel _iter6 in Vessels)
          {
            _iter6.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Bodies != null && __isset.bodies) {
        field.Name = "bodies";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Bodies.Count));
          foreach (KerbalApi.Api.CelestialBody _iter7 in Bodies)
          {
            _iter7.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (CurrentMainBody != null && __isset.currentMainBody) {
        field.Name = "currentMainBody";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        CurrentMainBody.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ActiveTarget != null && __isset.activeTarget) {
        field.Name = "activeTarget";
        field.Type = TType.Struct;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        ActiveTarget.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("FlightGlobals(");
      bool __first = true;
      if (ActiveVessel != null && __isset.activeVessel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActiveVessel: ");
        __sb.Append(ActiveVessel== null ? "<null>" : ActiveVessel.ToString());
      }
      if (Vessels != null && __isset.vessels) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Vessels: ");
        __sb.Append(Vessels);
      }
      if (Bodies != null && __isset.bodies) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bodies: ");
        __sb.Append(Bodies);
      }
      if (CurrentMainBody != null && __isset.currentMainBody) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CurrentMainBody: ");
        __sb.Append(CurrentMainBody== null ? "<null>" : CurrentMainBody.ToString());
      }
      if (ActiveTarget != null && __isset.activeTarget) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActiveTarget: ");
        __sb.Append(ActiveTarget== null ? "<null>" : ActiveTarget.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
